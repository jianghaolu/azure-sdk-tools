// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

namespace Microsoft.WindowsAzure.Commands.ServiceManagement.IaaS.Extensions.MicrosoftAntimalware
{
    using System;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using System.IO;
    using System.Management.Automation;
    using Microsoft.WindowsAzure.Commands.ServiceManagement.Model;
    using Microsoft.WindowsAzure.Commands.Storage.Model.ResourceModel;
    using WindowsAzure.Storage;
    using WindowsAzure.Storage.Auth;
    using Microsoft.WindowsAzure.Commands.ServiceManagement.Properties;
    
    [Cmdlet(
        VerbsCommon.Set,
        VirtualMachineMicrosoftAntimalwareExtensionNoun,
        DefaultParameterSetName = EnableMicrosoftAntimalwareExtensionConfigFileParamSetName),
    OutputType(
        typeof(IPersistentVM))]
    public class SetAzureVMMicrosoftAntimalwareExtensionCommand : VirtualMachineMicrosoftAntimalwareExtensionCmdletBase
    {
        public const string EnableMicrosoftAntimalwareExtensionConfigXmlDocParamSetName = "EnableMicrosoftAntimalwareExtensionConfigXmlDoc";
        public const string EnableMicrosoftAntimalwareExtensionConfigFileParamSetName = "EnableMicrosoftAntimalwareExtensionConfigFile";
        public const string DisableMicrosoftAntimalwareExtensionParamSetName = "DisableMicrosoftAntimalwareExtension";
        public const string UninstallMicrosoftAntimalwareExtensionParamSetName = "UninstallMicrosoftAntimalwareExtension";

        [Parameter(
            ParameterSetName = EnableMicrosoftAntimalwareExtensionConfigXmlDocParamSetName,
            Mandatory = true,
            Position = 1,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The Microsoft Antimalware Configuration")]
        [ValidateNotNullOrEmpty]
        public override XmlDocument AntimalwareConfiguration { get; set; }

        [Parameter(
            ParameterSetName = EnableMicrosoftAntimalwareExtensionConfigFileParamSetName,
            Mandatory = true,
            Position = 1,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The Microsoft Antimalware Configuration File Path")]
        [ValidateNotNullOrEmpty]
        public override string AntimalwareConfigFile { get; set; }

        [Parameter(
            ParameterSetName = EnableMicrosoftAntimalwareExtensionConfigXmlDocParamSetName,
            Mandatory = false,
            Position = 2,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The Extension Version")]
        [Parameter(
            ParameterSetName = EnableMicrosoftAntimalwareExtensionConfigFileParamSetName,
            Mandatory = false,
            Position = 2,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The Extension Version")]
        [Parameter(
            ParameterSetName = DisableMicrosoftAntimalwareExtensionParamSetName,
            Mandatory = false,
            Position = 1,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The Extension Version")]
        [ValidateNotNullOrEmpty]
        public override string Version { get; set; }

        [Parameter(
            ParameterSetName = DisableMicrosoftAntimalwareExtensionParamSetName,
            Mandatory = false,
            Position = 2,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Disable VM Microsoft Antimalware Extension")]
        public override SwitchParameter Disable { get; set; }

        [Parameter(
            ParameterSetName = UninstallMicrosoftAntimalwareExtensionParamSetName,
            Mandatory = true,
            Position = 1,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Uninstall VM Microsoft Antimalware Extension")]
        public override SwitchParameter Uninstall { get; set; }

        [Parameter(
            ParameterSetName = EnableMicrosoftAntimalwareExtensionConfigXmlDocParamSetName,
            Mandatory = false,
            Position = 3,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Microsoft Antimalware Event Monitoring (ON/OFF)")]
        [Parameter(
            ParameterSetName = EnableMicrosoftAntimalwareExtensionConfigFileParamSetName,
            Mandatory = false,
            Position = 3,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Microsoft Antimalware Event Monitoring (ON/OFF)")]
        [ValidateSet("ON", "OFF", IgnoreCase = true)]
        public string Monitoring { get; set; }

        [Parameter(
            ParameterSetName = EnableMicrosoftAntimalwareExtensionConfigXmlDocParamSetName,
            Mandatory = false,
            Position = 4,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Microsoft Antimalware Monitoring Storage Context")]
        [Parameter(
            ParameterSetName = EnableMicrosoftAntimalwareExtensionConfigFileParamSetName,
            Mandatory = false,
            Position = 4,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Microsoft Antimalware Monitoring Storage Context")]
        [ValidateNotNullOrEmpty]
        public override AzureStorageContext StorageContext { get; set; }

        private bool isAntimalwareEnabled = false;   // do not enable antimalware unless specified in configuration or parameters
        private enum MonitoringActionType { Enable, Disable, NoActionRequested } ;
        private MonitoringActionType monitoringAction = MonitoringActionType.NoActionRequested; // default to no action requested until identified in config or parameter

        internal void ExecuteCommand()
        {
            ValidateParameters();

            // set diagnostics extension
            InitializeDiagnosticsSettings();
            switch (monitoringAction)
            {
                // enable and disable are expected to update the diagnostics extension if needed 
                // resource extension will be added by EnableMonitoring or RemoveExistingAntimalwareMonitoringConfig as needed
                case MonitoringActionType.Enable: EnableMonitoring(); break;
                case MonitoringActionType.Disable: RemoveExistingAntimalwareMonitoringConfig(); break;
                default: break;
            }

            // set antimalware extension
            InitializeAntimalwareSettings();
            RemovePredicateExtensions();
            AddResourceExtension();  

            WriteObject(VM);
        }


        protected override void ValidateParameters()
        {
            base.ValidateParameters();
            ValidateConfiguration();
            this.ReferenceName = string.IsNullOrEmpty(this.ReferenceName) ? MicrosoftAntimalwareExtensionName : this.ReferenceName;
            this.Version = this.Version ?? MicrosoftAntimalwareExtensionDefaultVersion;
            this.PublicConfiguration = string.Format(MicrosoftAntimalwareExtensionPublicConfigurationTemplate,EscapeJsonCharacters(GetJsonEncodedAntimalwareConfig()));
        }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ExecuteCommand();
        }

        protected void ValidateConfiguration()
        {
            // if no AntimalwareConfiguration XmlDocument was provided, use the AntimalwareConfigFile parameter
            if ((AntimalwareConfiguration == null) && (AntimalwareConfigFile != null))
            {
                if ((!string.IsNullOrWhiteSpace(AntimalwareConfigFile)) && File.Exists(AntimalwareConfigFile))
                {
                    AntimalwareConfiguration = new XmlDocument();
                    AntimalwareConfiguration.XmlResolver = null;
                    AntimalwareConfiguration.Load(AntimalwareConfigFile);
                }
                else
                {
                    ThrowTerminatingError(new ErrorRecord(
                        new Exception("ServiceExtensionCannotFindAntimalwareConfigFile"),
                        string.Empty,
                        ErrorCategory.InvalidData,
                        null));
                }
            }

            // read values from xml file if provided
            if (AntimalwareConfiguration != null)
            {
                // check for antimalware enabled 
                XmlNode antimalwareEnabledNode = AntimalwareConfiguration.SelectSingleNode("//AntimalwareConfig/AntimalwareEnabled");
                if ((antimalwareEnabledNode != null) && (antimalwareEnabledNode.InnerText != null))
                {
                    isAntimalwareEnabled = antimalwareEnabledNode.InnerText.ToUpperInvariant().Equals("TRUE");
                }

                // check for monitoring enabled 
                XmlNode monitoringNode = AntimalwareConfiguration.SelectSingleNode("//AntimalwareConfig/Monitoring");
                if (monitoringNode != null)
                {
                    if (monitoringNode.InnerText != null)
                    {
                        switch (monitoringNode.InnerText.ToUpperInvariant())
                        {
                            case "ON": monitoringAction = MonitoringActionType.Enable; break;
                            case "OFF": monitoringAction = MonitoringActionType.Disable; break;
                            default: break;
                        }
                    }

                    // now remove the monitoring node from the xml document since it 
                    // is not recognized by the schema used by the antimalware extension
                    monitoringNode.ParentNode.RemoveChild(monitoringNode);
                }

                // check for storage account name if present in the config file
                XmlNode storageAccountNameNode = AntimalwareConfiguration.SelectSingleNode("//AntimalwareConfig/StorageAccountName");
                if (storageAccountNameNode != null)
                {
                    if (storageAccountNameNode.InnerText != null)
                    {
                        monitoringStorageAccountName = storageAccountNameNode.InnerText;
                    }
                    // strip this node from the xml prior to passing to antimalware extension
                    storageAccountNameNode.ParentNode.RemoveChild(storageAccountNameNode);
                }
            }

            // error no configuration was provided - error if this is not a case of disable or uninstall
            if (    !isAntimalwareEnabled && 
                    ((!((Disable.IsPresent && Disable.ToBool()) || (Uninstall.IsPresent && Uninstall.ToBool())))))
            {
                ThrowTerminatingError(new ErrorRecord(
                    new Exception("Configuration is required and must specify AntimalwareEnabled=true"),
                    string.Empty,
                    ErrorCategory.InvalidData,
                    null));
            }

            // process Monitoring parameter if specified (will override any setting in xml config)
            if (Monitoring != null)
            {
                switch (Monitoring.ToUpperInvariant())
                {
                    case "ON": monitoringAction = MonitoringActionType.Enable; break;
                    case "OFF": monitoringAction = MonitoringActionType.Disable; break;
                    default: break;
                }
            }
        }

        private void AddNewAntimalwareMonitoringConfig()
        {
            InitializeDiagnosticsSettings();
            RemovePredicateExtensions();
            AddResourceExtension();
        }

        private void MergeAntimalwareMonitoringIntoExistingConfig(string existingConfigXmlStr, string existingReferenceName)
        {
            // prepare a new xml document to hold the merged config
            XmlDocument mergedConfig = new XmlDocument();
            // add root element back to xml string (not preserved by diagnostics extension)
            string tmpXmlString = string.Format("<PublicConfig xmlns=\"{0}\">{1}</PublicConfig>", DiagnosticsConfigXmlNamespace, existingConfigXmlStr);
            mergedConfig.LoadXml(tmpXmlString);

            // check if old config already contains a WindowsEventLog section
            string targetNode;
            string mergeXmlStr;
            if (existingConfigXmlStr.Contains(DiagnosticsConfigWindowsEventLogNodeName))
            {
                // inject into the existing windows event log section 
                targetNode = DiagnosticsConfigWindowsEventLogNodeName;
                mergeXmlStr = DiagnosticsDefaultConfigMergeXmlWithExistingEventLogNode;
            }
            else
            {
                // inject a windows event log section with antimalware monitoring into the diagnostics config 
                targetNode = DiagnosticsConfigNodeName;
                mergeXmlStr = DiagnosticsDefaultConfigMergeXmlWithoutExistingEventLogNode;
            }

            // locate the desired target using xpath 
            string diagXPathStr = String.Format("//*[local-name()='{0}' and namespace-uri()='{1}']", targetNode, DiagnosticsConfigXmlNamespace);
            XmlNode diagNode = mergedConfig.DocumentElement.SelectSingleNode(diagXPathStr);

            // create an import node and then append to the correct location
            XmlDocument diagnosticsConfigXml = new XmlDocument();
            diagnosticsConfigXml.LoadXml(mergeXmlStr);

            XmlNode importNode = mergedConfig.ImportNode(diagnosticsConfigXml.DocumentElement, true);
            diagNode.AppendChild(importNode);

            // remove any stray xmlns="" attribute from xml string prior to use
            string mergedConfiguration = mergedConfig.DocumentElement.InnerXml;
            mergedConfiguration = mergedConfiguration.Replace(string.Format(" xmlns=\"{0}\"", DiagnosticsConfigXmlNamespace), "");
            mergedConfiguration = mergedConfiguration.Replace(" xmlns=\"\"", "");

            // now add extension using the new configuration
            PublicConfiguration = GetJsonEncodedDiagnosticsPublicConfig(mergedConfiguration);
            PrivateConfiguration = GetJsonEncodedDiagnosticsPrivateConfig();
            RemovePredicateExtensions();
            AddResourceExtension();
        }

        protected void EnableMonitoring()
        {
            // retrieve any pre-existing diagnostics extension
            var ext = GetDiagnosticsExtensionContext();

            if ((ext == null) &&
                 ((monitoringAction == MonitoringActionType.Disable) || (monitoringAction == MonitoringActionType.NoActionRequested)))
            {
                // if there was no pre-existing diagnostics extension there is 
                // nothing to do in either of these two cases so exit early 

                // note the user may not have provided a storage account either
                // so this check is performed prior to storage account validation                
                return;
            }

            // establish the storage account name to be associated with monitoring
            if (!IsValidStorageContext())
            {
                // no valid storage context exists, initialize storage context using config value
                InitializeStorageContext(monitoringStorageAccountName);
            }

            switch (monitoringAction)
            {
                case (MonitoringActionType.Enable):
                    if (ext == null)
                    {
                        AddNewAntimalwareMonitoringConfig();
                    }
                    else
                    {
                        // extension already exists, check to see if it already contains antimalware data source
                        if (!ext.AntimalwareMonitoringConfiguration.Contains(DiagnosticsConfigAntimalwareProviderToken))
                        {
                            // antimalware data source is not already in the configuration, merge it 
                            // with existing config (tracking perf counters, other event logs, etc.)
                            MergeAntimalwareMonitoringIntoExistingConfig(ext.AntimalwareMonitoringConfiguration, ext.ReferenceName);
                        }
                        else
                        {
                            // no modification required in this case so persist the last xml 
                            // configuration and set to the currently specified storage account 
                            // (this may be a transition to a new storage account from previous)
                            string persistedXmlCfg = GetXmlCfgFromJson(ext.PublicConfiguration);
                            PublicConfiguration = GetJsonEncodedDiagnosticsPublicConfig(persistedXmlCfg);
                            PrivateConfiguration = GetJsonEncodedDiagnosticsPrivateConfig();
                            RemovePredicateExtensions();
                            AddResourceExtension();
                        }
                    }
                    break;

                case (MonitoringActionType.Disable):
                    if (ext != null)
                    {
                        RemoveExistingAntimalwareMonitoringConfig();
                    }
                    break;

                case (MonitoringActionType.NoActionRequested):
                    break;

                default:
                    break;
            }
        }
    }
}